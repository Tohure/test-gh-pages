{
    "docs": [
        {
            "location": "/", 
            "text": "PagoEfectivo SDK para Android\n\n\n\n\n\n  \n\n    \n\n  \n\n\n\n\n\nOverview\n\n\n\n\nPagoEfectivo SDK\n le permitir\u00e1 implementar de forma r\u00e1pida y sencilla transacciones online a trav\u00e9s de la plataforma de \nPagoEfectivo\n para tel\u00e9fonos Android.\n\n\nEn el siguiente manual encontrar\u00e1 todo lo necesario para poder empezar la implementaci\u00f3n del SDK, as\u00ed como la forma correcta de implementar sus principales funciones tales como: \nGenerar un CIP\n, \nListar CIPS\n, etc.\n\n\nPre requisitos\n\n\n\n\n\n\nAndroid Studio\n 1.5.* o superior\n\n\nJDK 7 \u00f3 superior\n\n\nVersi\u00f3n actualizada del Android SDK\n\n\nAndroid API 16 en adelante (Android 4.1 en adelante)\n\n\n\n\nInstalaci\u00f3n\n\n\n\n\nInstalaci\u00f3n manual\n\n\nPara poder hacer uso del SDK de PagoEfectivo, necesitamos descargar el sdk atrav\u00e9s el siguiente \nlink\n\n\nAhora agregaremos un nuevo modulo a nuestro proyecto, para ello tenemos 2 opciones\n\n\n1. Primera Opci\u00f3n\n\n\nAgregaremos un nuevo modulo para ello seguimos los siguientes pasos:\n\n\n\n\nNos dirigimos a file -\n seleccionamos new -\n click en new\n\n\n\n\n\n\n\n\nAhora agregaremos un nuevo modulo ya sea importando un archivo .jar o .aar\n\n\n\n\n\n\n2. Segunda Opci\u00f3n\n\n\n\n\n\n\nDamos click en el icono \"Project Structure\" de Android Studio\n\n\n \n\n\n\n\n\n\nAhora damos click en el icono \"+\", y luego nos aparecer\u00e1 la ventana de nuevo modulo que esta en apartado \nPrimera opci\u00f3n.\n\n\n\n\n\n\n\n\nAhora seleccionamos la ruta del sdk de PagoEfectivo (.aar) y damos click en finish.\n\n\n\n\n\n\n\n\nAhora podremos ver que el modulo se ha agregado a la estructura de nuestro proyecto\n\n\n\n\n\n\n\n\nFinalmente no olvidar compilar el nuevo modulo con tu aplicaci\u00f3n, en el archivo build.gradle dentro del modulo app\nagregar las siguiente \n\n\n1\n2\n3\n4\n5\ndependencies\n \n{\n\n    \n...\n\n    \ncompile\n \nproject\n(\n:pagoefectivosdk\n)\n\n    \n...\n\n\n}\n\n\n\n\n\n\n\nInicializar PagoEfectivo SDK\n\n\n\n\nPara poder implementar las funciones CIPs de PagoEfectivo en tu proyecto, es necesario inicializar la librer\u00eda. Para lo cual necesitas los siguientes valores antes de empezar:\n\n\n\n\nService Id\n\n\nAccess Key\n\n\nSecret Key\n\n\n\n\n\n\nInfo\n\n\nSi a\u00fan no tienes tus Keys de conexi\u00f3n por favor comunicarse \naqu\u00ed\n\n\n\n\nInicializar la librer\u00eda de PagoEfectivo es muy simple, s\u00f3lo necesitas llamar a la siguiente l\u00ednea:\n\n\nJava\n\n\n1\n    \nPagoEfectivoSdk\n \npagoEfectivoSdk\n \n=\n \nPagoEfectivoSdk\n.\ninicialize\n(\nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n    \nval\n \npagoEfectivoSdk\n \n=\n \nPagoEfectivoSdk\n.\ninicialize\n(\nthis\n)\n\n\n\n\n\n\n\nLuego en el objeto \nPagoEfectivoSdk\n, es necesario setear las variables mencionadas anteriormente.\n\n\nJava\n\n\n1\n2\n3\n    \npagoEfectivoSdk\n.\nsetServiceId\n(\nSERVICEID\n);\n\n    \npagoEfectivoSdk\n.\nsetAccessKey\n(\nACCESKEY\n);\n\n    \npagoEfectivoSdk\n.\nsetSecretKey\n(\nSECRETKEY\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n    \npagoEfectivoSdk\n.\nsetServiceId\n(\nSERVICEID\n)\n\n    \npagoEfectivoSdk\n.\nsetAccessKey\n(\nACCESKEY\n)\n\n    \npagoEfectivoSdk\n.\nsetSecretKey\n(\nSECRETKEY\n)\n\n\n\n\n\n\n\nSandBox\n\nEn ambos lenguajes, si se desease trabajar en modo SandBox (ambientes PRE), se tiene que setear la siguiente propiedad en true, de no hacerse, el SDK siempr\u00e9 trabajara por default apuntando a Producci\u00f3n.\n\n\n1\n    \npagoEfectivoSdk\n.\nsetSandBox\n(\ntrue\n);\n\n\n\n\n\n\n\nComo se observa, el objeto necesita un contexto para inicializarse. El cual puede ser obtenido de cualquier actividad y/o fragmento. Se recomienda obtenerlo de la subclase \nApplication\n en el m\u00e9todo \nonCreate\n.\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\npublic\n \nclass\n \nMyApplication\n \nextends\n \nApplication\n \n{\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n();\n\n        \nPagoEfectivoSdk\n \npagoEfectivoSdk\n \n=\n \nPagoEfectivoSdk\n.\ninicialize\n(\nthis\n);\n\n        \npagoEfectivoSdk\n.\nsetServiceId\n(\nSERVICEID\n);\n\n        \npagoEfectivoSdk\n.\nsetAccessKey\n(\nACCESKEY\n);\n\n        \npagoEfectivoSdk\n.\nsetSecretKey\n(\nSECRETKEY\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nclass\n \nMyApplication\n \n:\n \nApplication\n()\n \n{\n\n    \noverride\n \nfun\n \nonCreate\n()\n \n{\n\n        \nval\n \npagoEfectivoSdk\n \n=\n \nPagoEfectivoSdk\n.\ninicialize\n(\nthis\n)\n\n        \npagoEfectivoSdk\n.\nsetServiceId\n(\nSERVICEID\n)\n\n        \npagoEfectivoSdk\n.\nsetAccessKey\n(\nACCESKEY\n)\n\n        \npagoEfectivoSdk\n.\nsetSecretKey\n(\nSECRETKEY\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nNo olvidar que al implementar nuestra propia subclase \nApplication\n es necesario declarar su nombre en el \nAndroidManifest.xml\n\n\n1\n2\n3\n4\napplication\n\n  \nandroid:name=\n.MyApplication\n\n  \n...\n\n\n/\n\n\n\n\n\n\n\nUso de PagoEfectivo SDK | CIP's Functions\n\n\n\n\nCon el SDK ya instalado en nuestro IDE las llamadas a las funciones para CIP's ser\u00e1n muy sencillas.\n\n\nPaso 1:\n\nCrear una variable en tu clase de tipo \nPagoEfectivoSdk\n\n\nJava\n\n\n1\n    \nPagoEfectivoSdk\n \ninstance\n;\n\n\n\n\n\n\n\nKotlin\n\n\n1\n    \nval\n \ninstance\n\n\n\n\n\n\n\nPaso 2:\n\nInicializar tu variable con el m\u00e9todo \ngetInstance()\n.\n\n\nJava\n\n\n1\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n();\n\n\n\n\n\n\n\nKotlin\n\n\n1\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n()\n\n\n\n\n\n\n\nPaso 3:\n\nLlamar las funciones que requieras!\n\n\ngenerateCip()\n\n\nJava\n\n\n1\n    \ninstance\n.\ngenerateCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncipRequest\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n    \ninstance\n.\ngenerateCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncipRequest\n,\n \nthis\n)\n\n\n\n\n\n\n\nsearchCip()\n\n\nJava\n\n\n1\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \nrequestList\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \nrequestList\n,\n \nthis\n)\n\n\n\n\n\n\n\nPagoEfectivo SDK | Generar CIP\n\n\n\n\nPara poder generar un CIP se tiene que tener en cuenta los siguientes 3 pasos:\n\n\n\n\nPreparar objeto \nCipRequest\n\n\nImplementar \nCipListener\n\n\nLlamar al m\u00e9todo \ngenerateCip()\n\n\n\n\nVeamos c\u00f3mo hacerlo en detalle:\n\n\n1. Preparar Objeto CipRequest\n\n\nLa petici\u00f3n para crear un CIP requiere de los siguientes campos:\n\n\n\n\ncurrency (Requerido)\n\n\namount (Requerido)\n\n\ntransactionCode (Requerido)\n\n\nadminEmail (Opcional)\n\n\ndateExpiry (Opcional)\n\n\npaymentConcept (Opcional)\n\n\nadditionalData (Opcional)\n\n\nuserEmail (Requerido)\n\n\nuserName (Opcional)\n\n\nuserLastName (Opcional)\n\n\nuserUbigeo (Opcional)\n\n\nuserCountry (Opcional)\n\n\nuserDocumentType (Opcional)\n\n\nuserDocumentNumber (Opcional)\n\n\nuserPhone (Opcional)\n\n\nuserCodeCountry (Opcional)\n\n\n\n\nTodos estos campos los puedes setear declarando un objeto de tipo CipRequest. Aqu\u00ed te mostramos un peque\u00f1o ejemplo con algunos campos.\n\n\nJava\n\n\n1\n2\n3\n4\n    \nCipRequest\n \ncipRequest\n \n=\n \nnew\n \nCipRequest\n();\n\n    \ncipRequest\n.\nsetUserEmail\n(\nuser@gmail.com\n);\n\n    \ncipRequest\n.\nsetTransactionCode\n(\n777\n);\n\n    \ncipRequest\n.\nsetAmount\n(\n777.77\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n4\n    \nval\n \ncipRequest\n \n=\n \nCipRequest\n()\n\n    \ncipRequest\n.\nuserEmail\n \n=\n \nuser@gmail.com\n\n    \ncipRequest\n.\ntransactionCode\n \n=\n \n777\n\n    \ncipRequest\n.\namount\n \n=\n \n777.77\n\n\n\n\n\n\n\nPara el caso de \ncurrency\n y \nuserDocumentType\n, se debe setear los campos con variables predefinidas por el SDK. como ejemplo de moneda a usar \nUSD\n y de tipo de documento \nDNI\n.\n\n\nJava\n\n\n1\n2\n    \ncipRequest\n.\nsetCurrency\n(\nCurrency\n.\nUSD\n);\n\n    \ncipRequest\n.\nsetUserDocumentType\n(\nDocumentType\n.\nDNI\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n    \ncipRequest\n.\ncurrency\n \n=\n \nCurrency\n.\nUSD\n\n    \ncipRequest\n.\nuserDocumentType\n \n=\n \nDocumentType\n.\nDNI\n\n\n\n\n\n\n\nEl uso de los objetos \nCurrency\n o \nDocumentType\n les permite acceder a las opciones disponibles para cada campo respectivamente.\n\n\n\n\nCurrency\n\n\n\n\n\n\n\n\n\n\nDocumentType\n\n\n)\n\n\n\n\nHecho todo lo anterior, se procede con el paso n\u00famero 2.\n\n\n2. Implementar CipListener\n\n\nEl SDK provee un callback que le permite tener los siguientes 3 estados al generar un CIP\n\n\n\n\nOnCipSuccessful | Evento lanzado cuando el CIP fue generado correctamente, devolviendo un objeto de tipo CIP con todos sus datos respectivos.\n\n\nOnCipError | Evento lanzado cuando sucedi\u00f3 un error al generar el CIP, devuelve una lista de todos los errores o error ocurridos durante el proceso (Ver apartado de Errores).\n\n\nOnCipFailure | Evento lanzado cuando sucedi\u00f3 un error de conexi\u00f3n con los servicios de PagoEfectivo, devolviendo un mensaje de error (String) de lo sucedido.\n\n\n\n\nPara poder llamar los callbacks de la generaci\u00f3n de CIP, basta con implementar en la clase donde se est\u00e9 trabajando, la interfaz \nCipListener\n\n\nEjemplo de implementaci\u00f3n en una Actividad\n\n\n\n\nJava\n\n\n\n\nKotlin\n\n\n\n\n\n\nCuando la interfaz es implementada, sus respectivos m\u00e9todos son llamados en la clase.\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnCipSuccessful\n(\nCip\n \ncip\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnCipError\n(\nList\nCipError\n \nmessage\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnCipFailure\n(\nString\n \nmessage\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n\n\n\n\n\nKotlin\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \noverride\n \nfun\n \nOnCipSuccessful\n(\ncip\n:\n \nCip\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nOnCipError\n(\nmessage\n:\n \nList\nCipError\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nOnCipFailure\n(\nmessage\n:\n \nString\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n\n\n\n\n\nCon los pasos anteriores hechos, se procede a llamar a la funci\u00f3n de generaci\u00f3n de CIP's.\n\n\n3. M\u00e9todo generateCip()\n\n\nEl m\u00e9todo generateCip() recibe 3 par\u00e1metros:\n\n\n\n\nObjeto CipRequest | Generado en el paso 1\n\n\nCipListener Callback | Generado en el paso 2\n\n\nLenguaje de la petici\u00f3n (Language Object)\n\n\n\n\nPara el lenguaje de la petici\u00f3n, el SDK provee una clase que le dar\u00e1 los idiomas soportados por el SDK. Esta es la clase Language.\n\n\n\n\nClase Language\n\n\n\n\n\n\nTeniendo definido los 3 par\u00e1metros, el m\u00e9todo se llama con una instancia de la clase PagoEfectivoSdk. Aqu\u00ed te mostramos un ejemplo usando como idioma predefinido el idioma SPANISH_PERU\n\n\nJava\n\n\n1\n2\n3\n4\n    \nPagoEfectivoSdk\n \ninstance\n;\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n();\n\n\n    \ninstance\n.\ngenerateCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncipRequest\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n    \nval\n \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n()\n\n\n    \ninstance\n.\ngenerateCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncipRequest\n,\n \nthis\n)\n\n\n\n\n\n\n\nCabe mencionar que en caso no se setee el lenguaje en la petici\u00f3n, est\u00e9 ser\u00e1 por default \nSPANISH_PERU\n.\n\n\nJava\n\n\n1\n2\n3\n4\n    \nPagoEfectivoSdk\n \ninstance\n;\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n();\n\n\n    \ninstance\n.\ngenerateCip\n(\ncipRequest\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n    \nval\n \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n()\n\n\n    \ninstance\n.\ngenerateCip\n(\ncipRequest\n,\n \nthis\n)\n\n\n\n\n\n\n\nEl CIP generado por este m\u00e9todo, se podr\u00e1 consumir desde el llamado del callback OnCipSuccessful(), m\u00e9todo que devuelve un objeto CIP resultante del m\u00e9todo anterior, con todos sus m\u00e9todos getters respectivos para poder consumirlo y usarlo como convenga en la aplicaci\u00f3n cliente.\n\n\nOnCipSuccessful()\n\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n\n\n\nPagoEfectivo SDK | Listar CIP's\n\n\n\n\nEn la funci\u00f3n de Listar CIP's se consideran los siguientes 3 pasos:\n\n\n\n\nPreparar un CIP o una lista de CIP's a buscar (elementos de tipo Int)\n\n\nImplementar \nSearchListener\n\n\nLlamar al m\u00e9todo \nsearchCip()\n\n\n\n\n1. Preparar Cip(s)\n\n\nPara buscar CIPs podemos hacerlo directamente con una variable de tipo int o con una lista de este mismo tipo, si se desea buscar m\u00e1s de un CIP al mismo tiempo:\n\n\nJava\n\n\n1\n2\n3\n4\n5\n6\n7\n    \n//Only one Cip\n\n    \nint\n \ncip\n \n=\n \n7777777\n;\n\n\n    \n//Multiple Cips\n\n    \nList\nInteger\n \nlistCips\n \n=\n \nnew\n \nArrayList\n();\n\n    \nlistCips\n.\nadd\n(\n7777777\n);\n\n    \nlistCips\n.\nadd\n(\n3333333\n);\n\n\n\n\n\n\n\nKotlin\n\n\n1\n2\n3\n4\n5\n6\n7\n    \n//Only one Cip\n\n    \nval\n \ncip\n \n=\n \n7777777\n\n\n    \n//Multiple Cips\n\n    \nval\n \nlistCips\n \n=\n \nArrayList\nInt\n()\n\n    \nlistCips\n.\nadd\n(\n7777777\n)\n\n    \nlistCips\n.\nadd\n(\n3333333\n)\n\n\n\n\n\n\n\n2. Implementar SearchListener\n\n\nEl SDK provee un callback que le permite tener los siguientes 3 estados al generar un CIP\n\n\n\n\nOnSearchSuccessful | Evento lanzado cuando la b\u00fasqueda se efectu\u00f3 correctamente, devolviendo una lista de objetos de tipo CipSearch con todos sus datos respectivos. Cabe resaltar en este punto que si se envi\u00f3 una lista con varios Cips a buscar y uno o m\u00e1s de ellos son inexistentes o err\u00f3neos, el m\u00e9todo devolver\u00e1 una lista con los cips correctos, y los incorrectos aparecer\u00e1n con una estructura vac\u00eda por ser valores no encontrados.\n\n\nOnCipError | Evento lanzado cuando sucedi\u00f3 un error al buscar CIPs, devuelve una lista de todos los errores o error ocurridos durante el proceso (Ver apartado de Errores).\n\n\nOnCipFailure | Evento lanzado cuando sucedi\u00f3 un error de conexi\u00f3n con los servicios de PagoEfectivo, devolviendo un mensaje de error (String) con lo sucedido.\n\n\n\n\nPara poder llamar los callbacks de la b\u00fasqueda de CIPs, basta con implementar en la clase donde se est\u00e9 trabajando, la interfaz \nSearchListener\n\n\nEjemplo de implementaci\u00f3n en una Actividad\n\n\n\n\nJava\n\n\n\n\nKotlin\n\n\n\n\n\n\nCuando la interfaz es implementada, sus respectivos m\u00e9todos son llamados en la clase.\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnSearchSuccessful\n(\nList\nCipError\n \nlist\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnCipError\n(\nList\nCipError\n \nmessage\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nOnCipFailure\n(\nString\n \nmessage\n)\n \n{\n\n        \n//TODO: CODE HERE\n\n    \n}\n\n\n\n\n\n\n\nKotlin\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \noverride\n \nfun\n \nOnSearchSuccessful\n(\nlist\n:\n \nList\nCipSearch\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nOnCipError\n(\nmessage\n:\n \nList\nCipError\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nOnCipFailure\n(\nmessage\n:\n \nString\n)\n \n{\n\n        \nTODO\n(\nCODE HERE\n)\n\n    \n}\n\n\n\n\n\n\n\nCon los pasos anteriores hechos, se procede a llamar a la funci\u00f3n de b\u00fasqueda de CIP's.\n\n\n3. M\u00e9todo searchCip()\n\n\nEl m\u00e9todo searchCip() recibe 3 par\u00e1metros:\n\n\n\n\nCIP o CIPs a buscar | Generado en el paso 1\n\n\nSearchListener Callback | Generado en el paso 2\n\n\nLenguaje de la petici\u00f3n (Language Object)\n\n\n\n\nPara el lenguaje de la petici\u00f3n, el SDK provee una clase que le dar\u00e1 los idiomas soportados por el SDK. Esta es la clase: Language.\n\n\n\n\nClase Language\n\n\n\n\n\n\nTeniendo definido los 3 par\u00e1metros, el m\u00e9todo se llama con una instancia de la clase PagoEfectivoSdk. Aqu\u00ed te mostramos un ejemplo usando como idioma predefinido el idioma SPANISH_PERU\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \nPagoEfectivoSdk\n \ninstance\n;\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n();\n\n\n    \n//One Cip\n\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncip\n,\n \nthis\n);\n\n\n    \n//Multiple Cips\n\n    \nList\nInteger\n \nlistCips\n \n=\n \nnew\n \nArrayList\n();\n\n    \nlistCips\n.\nadd\n(\n7777777\n);\n\n    \nlistCips\n.\nadd\n(\n3333333\n);\n\n\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \nlistCips\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \nval\n \ninstance\n:\n \nPagoEfectivoSdk\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n()\n\n\n    \n//One Cip\n\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \ncip\n,\n \nthis\n)\n\n\n    \n//Multiple Cips\n\n    \nval\n \nlistCips\n \n=\n \nArrayList\nInt\n()\n\n    \nlistCips\n.\nadd\n(\n7777777\n)\n\n    \nlistCips\n.\nadd\n(\n3333333\n)\n\n\n    \ninstance\n.\nsearchCip\n(\nLanguage\n.\nSPANISH_PERU\n,\n \nlistCips\n,\n \nthis\n)\n\n\n\n\n\n\n\nCabe mencionar que en caso no se setee el lenguaje en la petici\u00f3n, est\u00e9 ser\u00e1 por default \nSPANISH_PERU\n tal como sucede en el generateCip().\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \nPagoEfectivoSdk\n \ninstance\n;\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n();\n\n\n    \n//One Cip\n\n    \ninstance\n.\nsearchCip\n(\ncip\n,\n \nthis\n);\n\n\n    \n//Multiple Cips\n\n    \nList\nInteger\n \nlistCips\n \n=\n \nnew\n \nArrayList\n();\n\n    \nlistCips\n.\nadd\n(\n7777777\n);\n\n    \nlistCips\n.\nadd\n(\n3333333\n);\n\n\n    \ninstance\n.\nsearchCip\n(\nlistCips\n,\n \nthis\n);\n\n\n\n\n\n\n\nKotlin\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n    \nval\n \ninstance\n:\n \nPagoEfectivoSdk\n\n    \ninstance\n \n=\n \nPagoEfectivoSdk\n.\ngetInstance\n()\n\n\n    \n//One Cip\n\n    \ninstance\n.\nsearchCip\n(\ncip\n,\n \nthis\n)\n\n\n    \n//Multiple Cips\n\n    \nval\n \nlistCips\n \n=\n \nArrayList\nInt\n()\n\n    \nlistCips\n.\nadd\n(\n7777777\n)\n\n    \nlistCips\n.\nadd\n(\n3333333\n)\n\n\n    \ninstance\n.\nsearchCip\n(\nlistCips\n,\n \nthis\n)\n\n\n\n\n\n\n\nEl CIP(s) resultante(s) de esta funci\u00f3n, se podr\u00e1(n) consumir desde el llamado del callback OnSearchSuccessful(), m\u00e9todo que devuelve todos los CIPs buscados por el usuario a trav\u00e9s de una lista de objetos \nCipSearch\n.\n\n\nOnSearchSuccessful()\n\n\n\n\nJava\n\n\n\n\nKotlin\n\n\n\n\n\n\nPagoEfectivo SDK | Tratamiento de Errores\n\n\n\n\nPara la implementaci\u00f3n de \ngenerateCip()\n y \nsearchCip()\n fueron necesarios el uso de sus respectivos listener \n(CipListener \n SearchListener)\n los cuales tienen en com\u00fan una funci\u00f3n para el tratamiento de errores \nOnCipError()\n.\n\n\nOnCipError()\n devuelve una lista de objetos de tipo CipError. El cual tiene 3 campos b\u00e1sicos:\n\n\n\n\ncode --\n C\u00f3digo del error generado\n\n\nfield --\n Campo Errado o Secci\u00f3n errada\n\n\nmessage --\n Descripci\u00f3n del error\n\n\n\n\nAl ser una lista, esta se puede recorrer listando as\u00ed el(los) error(es) que se puedan generar al llamar las funciones respectivas del SDK.\n\n\nJava\n\n\n\n\nKotlin\n\n\n\n\nPagoEfectivo SDK | Proguard Configurations\n\n\n\n\nSi est\u00e1 usando ProGuard en su proyecto agregue las siguientes l\u00edneas a su archivo de configuraci\u00f3n Proguard:\n\n\n1\n2\n3\n-keep class pe.kdsep.** { *; }\n-dontwarn javax.annotation.**\n-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement\n\n\n\n\n\n\n\n\nCualquier duda puedes escribirnos a: \nfeedback@pagoefectivo.pe\n.", 
            "title": "Android"
        }, 
        {
            "location": "/#pagoefectivo-sdk-para-android", 
            "text": "", 
            "title": "PagoEfectivo SDK para Android"
        }, 
        {
            "location": "/#overview", 
            "text": "PagoEfectivo SDK  le permitir\u00e1 implementar de forma r\u00e1pida y sencilla transacciones online a trav\u00e9s de la plataforma de  PagoEfectivo  para tel\u00e9fonos Android.  En el siguiente manual encontrar\u00e1 todo lo necesario para poder empezar la implementaci\u00f3n del SDK, as\u00ed como la forma correcta de implementar sus principales funciones tales como:  Generar un CIP ,  Listar CIPS , etc.", 
            "title": "Overview"
        }, 
        {
            "location": "/#pre-requisitos", 
            "text": "Android Studio  1.5.* o superior  JDK 7 \u00f3 superior  Versi\u00f3n actualizada del Android SDK  Android API 16 en adelante (Android 4.1 en adelante)", 
            "title": "Pre requisitos"
        }, 
        {
            "location": "/#instalacion", 
            "text": "", 
            "title": "Instalaci\u00f3n"
        }, 
        {
            "location": "/#instalacion-manual", 
            "text": "Para poder hacer uso del SDK de PagoEfectivo, necesitamos descargar el sdk atrav\u00e9s el siguiente  link  Ahora agregaremos un nuevo modulo a nuestro proyecto, para ello tenemos 2 opciones", 
            "title": "Instalaci\u00f3n manual"
        }, 
        {
            "location": "/#1-primera-opcion", 
            "text": "Agregaremos un nuevo modulo para ello seguimos los siguientes pasos:   Nos dirigimos a file -  seleccionamos new -  click en new     Ahora agregaremos un nuevo modulo ya sea importando un archivo .jar o .aar", 
            "title": "1. Primera Opci\u00f3n"
        }, 
        {
            "location": "/#2-segunda-opcion", 
            "text": "Damos click en el icono \"Project Structure\" de Android Studio       Ahora damos click en el icono \"+\", y luego nos aparecer\u00e1 la ventana de nuevo modulo que esta en apartado  Primera opci\u00f3n.     Ahora seleccionamos la ruta del sdk de PagoEfectivo (.aar) y damos click en finish.     Ahora podremos ver que el modulo se ha agregado a la estructura de nuestro proyecto     Finalmente no olvidar compilar el nuevo modulo con tu aplicaci\u00f3n, en el archivo build.gradle dentro del modulo app\nagregar las siguiente   1\n2\n3\n4\n5 dependencies   { \n     ... \n     compile   project ( :pagoefectivosdk ) \n     ...  }", 
            "title": "2. Segunda Opci\u00f3n"
        }, 
        {
            "location": "/#inicializar-pagoefectivo-sdk", 
            "text": "Para poder implementar las funciones CIPs de PagoEfectivo en tu proyecto, es necesario inicializar la librer\u00eda. Para lo cual necesitas los siguientes valores antes de empezar:   Service Id  Access Key  Secret Key    Info  Si a\u00fan no tienes tus Keys de conexi\u00f3n por favor comunicarse  aqu\u00ed   Inicializar la librer\u00eda de PagoEfectivo es muy simple, s\u00f3lo necesitas llamar a la siguiente l\u00ednea:  Java  1      PagoEfectivoSdk   pagoEfectivoSdk   =   PagoEfectivoSdk . inicialize ( this );    Kotlin  1      val   pagoEfectivoSdk   =   PagoEfectivoSdk . inicialize ( this )    Luego en el objeto  PagoEfectivoSdk , es necesario setear las variables mencionadas anteriormente.  Java  1\n2\n3      pagoEfectivoSdk . setServiceId ( SERVICEID ); \n     pagoEfectivoSdk . setAccessKey ( ACCESKEY ); \n     pagoEfectivoSdk . setSecretKey ( SECRETKEY );    Kotlin  1\n2\n3      pagoEfectivoSdk . setServiceId ( SERVICEID ) \n     pagoEfectivoSdk . setAccessKey ( ACCESKEY ) \n     pagoEfectivoSdk . setSecretKey ( SECRETKEY )    SandBox \nEn ambos lenguajes, si se desease trabajar en modo SandBox (ambientes PRE), se tiene que setear la siguiente propiedad en true, de no hacerse, el SDK siempr\u00e9 trabajara por default apuntando a Producci\u00f3n.  1      pagoEfectivoSdk . setSandBox ( true );    Como se observa, el objeto necesita un contexto para inicializarse. El cual puede ser obtenido de cualquier actividad y/o fragmento. Se recomienda obtenerlo de la subclase  Application  en el m\u00e9todo  onCreate .  Java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 public   class   MyApplication   extends   Application   { \n\n     @Override \n     public   void   onCreate ()   { \n         super . onCreate (); \n         PagoEfectivoSdk   pagoEfectivoSdk   =   PagoEfectivoSdk . inicialize ( this ); \n         pagoEfectivoSdk . setServiceId ( SERVICEID ); \n         pagoEfectivoSdk . setAccessKey ( ACCESKEY ); \n         pagoEfectivoSdk . setSecretKey ( SECRETKEY ); \n     }  }    Kotlin  1\n2\n3\n4\n5\n6\n7\n8 class   MyApplication   :   Application ()   { \n     override   fun   onCreate ()   { \n         val   pagoEfectivoSdk   =   PagoEfectivoSdk . inicialize ( this ) \n         pagoEfectivoSdk . setServiceId ( SERVICEID ) \n         pagoEfectivoSdk . setAccessKey ( ACCESKEY ) \n         pagoEfectivoSdk . setSecretKey ( SECRETKEY ) \n     }  }    No olvidar que al implementar nuestra propia subclase  Application  es necesario declarar su nombre en el  AndroidManifest.xml  1\n2\n3\n4 application \n   android:name= .MyApplication \n   ...  /", 
            "title": "Inicializar PagoEfectivo SDK"
        }, 
        {
            "location": "/#uso-de-pagoefectivo-sdk-cips-functions", 
            "text": "Con el SDK ya instalado en nuestro IDE las llamadas a las funciones para CIP's ser\u00e1n muy sencillas.  Paso 1: \nCrear una variable en tu clase de tipo  PagoEfectivoSdk  Java  1      PagoEfectivoSdk   instance ;    Kotlin  1      val   instance    Paso 2: \nInicializar tu variable con el m\u00e9todo  getInstance() .  Java  1      instance   =   PagoEfectivoSdk . getInstance ();    Kotlin  1      instance   =   PagoEfectivoSdk . getInstance ()    Paso 3: \nLlamar las funciones que requieras!  generateCip()  Java  1      instance . generateCip ( Language . SPANISH_PERU ,   cipRequest ,   this );    Kotlin  1      instance . generateCip ( Language . SPANISH_PERU ,   cipRequest ,   this )    searchCip()  Java  1      instance . searchCip ( Language . SPANISH_PERU ,   requestList ,   this );    Kotlin  1      instance . searchCip ( Language . SPANISH_PERU ,   requestList ,   this )", 
            "title": "Uso de PagoEfectivo SDK | CIP's Functions"
        }, 
        {
            "location": "/#pagoefectivo-sdk-generar-cip", 
            "text": "Para poder generar un CIP se tiene que tener en cuenta los siguientes 3 pasos:   Preparar objeto  CipRequest  Implementar  CipListener  Llamar al m\u00e9todo  generateCip()   Veamos c\u00f3mo hacerlo en detalle:", 
            "title": "PagoEfectivo SDK | Generar CIP"
        }, 
        {
            "location": "/#1-preparar-objeto-ciprequest", 
            "text": "La petici\u00f3n para crear un CIP requiere de los siguientes campos:   currency (Requerido)  amount (Requerido)  transactionCode (Requerido)  adminEmail (Opcional)  dateExpiry (Opcional)  paymentConcept (Opcional)  additionalData (Opcional)  userEmail (Requerido)  userName (Opcional)  userLastName (Opcional)  userUbigeo (Opcional)  userCountry (Opcional)  userDocumentType (Opcional)  userDocumentNumber (Opcional)  userPhone (Opcional)  userCodeCountry (Opcional)   Todos estos campos los puedes setear declarando un objeto de tipo CipRequest. Aqu\u00ed te mostramos un peque\u00f1o ejemplo con algunos campos.  Java  1\n2\n3\n4      CipRequest   cipRequest   =   new   CipRequest (); \n     cipRequest . setUserEmail ( user@gmail.com ); \n     cipRequest . setTransactionCode ( 777 ); \n     cipRequest . setAmount ( 777.77 );    Kotlin  1\n2\n3\n4      val   cipRequest   =   CipRequest () \n     cipRequest . userEmail   =   user@gmail.com \n     cipRequest . transactionCode   =   777 \n     cipRequest . amount   =   777.77    Para el caso de  currency  y  userDocumentType , se debe setear los campos con variables predefinidas por el SDK. como ejemplo de moneda a usar  USD  y de tipo de documento  DNI .  Java  1\n2      cipRequest . setCurrency ( Currency . USD ); \n     cipRequest . setUserDocumentType ( DocumentType . DNI );    Kotlin  1\n2      cipRequest . currency   =   Currency . USD \n     cipRequest . userDocumentType   =   DocumentType . DNI    El uso de los objetos  Currency  o  DocumentType  les permite acceder a las opciones disponibles para cada campo respectivamente.   Currency      DocumentType  )   Hecho todo lo anterior, se procede con el paso n\u00famero 2.", 
            "title": "1. Preparar Objeto CipRequest"
        }, 
        {
            "location": "/#2-implementar-ciplistener", 
            "text": "El SDK provee un callback que le permite tener los siguientes 3 estados al generar un CIP   OnCipSuccessful | Evento lanzado cuando el CIP fue generado correctamente, devolviendo un objeto de tipo CIP con todos sus datos respectivos.  OnCipError | Evento lanzado cuando sucedi\u00f3 un error al generar el CIP, devuelve una lista de todos los errores o error ocurridos durante el proceso (Ver apartado de Errores).  OnCipFailure | Evento lanzado cuando sucedi\u00f3 un error de conexi\u00f3n con los servicios de PagoEfectivo, devolviendo un mensaje de error (String) de lo sucedido.   Para poder llamar los callbacks de la generaci\u00f3n de CIP, basta con implementar en la clase donde se est\u00e9 trabajando, la interfaz  CipListener  Ejemplo de implementaci\u00f3n en una Actividad   Java   Kotlin    Cuando la interfaz es implementada, sus respectivos m\u00e9todos son llamados en la clase.  Java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14      @Override \n     public   void   OnCipSuccessful ( Cip   cip )   { \n         //TODO: CODE HERE \n     } \n\n     @Override \n     public   void   OnCipError ( List CipError   message )   { \n         //TODO: CODE HERE \n     } \n\n     @Override \n     public   void   OnCipFailure ( String   message )   { \n         //TODO: CODE HERE \n     }    Kotlin   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      override   fun   OnCipSuccessful ( cip :   Cip )   { \n         TODO ( CODE HERE ) \n     } \n\n     override   fun   OnCipError ( message :   List CipError )   { \n         TODO ( CODE HERE ) \n     } \n\n     override   fun   OnCipFailure ( message :   String )   { \n         TODO ( CODE HERE ) \n     }    Con los pasos anteriores hechos, se procede a llamar a la funci\u00f3n de generaci\u00f3n de CIP's.", 
            "title": "2. Implementar CipListener"
        }, 
        {
            "location": "/#3-metodo-generatecip", 
            "text": "El m\u00e9todo generateCip() recibe 3 par\u00e1metros:   Objeto CipRequest | Generado en el paso 1  CipListener Callback | Generado en el paso 2  Lenguaje de la petici\u00f3n (Language Object)   Para el lenguaje de la petici\u00f3n, el SDK provee una clase que le dar\u00e1 los idiomas soportados por el SDK. Esta es la clase Language.   Clase Language    Teniendo definido los 3 par\u00e1metros, el m\u00e9todo se llama con una instancia de la clase PagoEfectivoSdk. Aqu\u00ed te mostramos un ejemplo usando como idioma predefinido el idioma SPANISH_PERU  Java  1\n2\n3\n4      PagoEfectivoSdk   instance ; \n     instance   =   PagoEfectivoSdk . getInstance (); \n\n     instance . generateCip ( Language . SPANISH_PERU ,   cipRequest ,   this );    Kotlin  1\n2\n3      val   instance   =   PagoEfectivoSdk . getInstance () \n\n     instance . generateCip ( Language . SPANISH_PERU ,   cipRequest ,   this )    Cabe mencionar que en caso no se setee el lenguaje en la petici\u00f3n, est\u00e9 ser\u00e1 por default  SPANISH_PERU .  Java  1\n2\n3\n4      PagoEfectivoSdk   instance ; \n     instance   =   PagoEfectivoSdk . getInstance (); \n\n     instance . generateCip ( cipRequest ,   this );    Kotlin  1\n2\n3      val   instance   =   PagoEfectivoSdk . getInstance () \n\n     instance . generateCip ( cipRequest ,   this )    El CIP generado por este m\u00e9todo, se podr\u00e1 consumir desde el llamado del callback OnCipSuccessful(), m\u00e9todo que devuelve un objeto CIP resultante del m\u00e9todo anterior, con todos sus m\u00e9todos getters respectivos para poder consumirlo y usarlo como convenga en la aplicaci\u00f3n cliente.  OnCipSuccessful()   Java     Kotlin", 
            "title": "3. M\u00e9todo generateCip()"
        }, 
        {
            "location": "/#pagoefectivo-sdk-listar-cips", 
            "text": "En la funci\u00f3n de Listar CIP's se consideran los siguientes 3 pasos:   Preparar un CIP o una lista de CIP's a buscar (elementos de tipo Int)  Implementar  SearchListener  Llamar al m\u00e9todo  searchCip()", 
            "title": "PagoEfectivo SDK | Listar CIP's"
        }, 
        {
            "location": "/#1-preparar-cips", 
            "text": "Para buscar CIPs podemos hacerlo directamente con una variable de tipo int o con una lista de este mismo tipo, si se desea buscar m\u00e1s de un CIP al mismo tiempo:  Java  1\n2\n3\n4\n5\n6\n7      //Only one Cip \n     int   cip   =   7777777 ; \n\n     //Multiple Cips \n     List Integer   listCips   =   new   ArrayList (); \n     listCips . add ( 7777777 ); \n     listCips . add ( 3333333 );    Kotlin  1\n2\n3\n4\n5\n6\n7      //Only one Cip \n     val   cip   =   7777777 \n\n     //Multiple Cips \n     val   listCips   =   ArrayList Int () \n     listCips . add ( 7777777 ) \n     listCips . add ( 3333333 )", 
            "title": "1. Preparar Cip(s)"
        }, 
        {
            "location": "/#2-implementar-searchlistener", 
            "text": "El SDK provee un callback que le permite tener los siguientes 3 estados al generar un CIP   OnSearchSuccessful | Evento lanzado cuando la b\u00fasqueda se efectu\u00f3 correctamente, devolviendo una lista de objetos de tipo CipSearch con todos sus datos respectivos. Cabe resaltar en este punto que si se envi\u00f3 una lista con varios Cips a buscar y uno o m\u00e1s de ellos son inexistentes o err\u00f3neos, el m\u00e9todo devolver\u00e1 una lista con los cips correctos, y los incorrectos aparecer\u00e1n con una estructura vac\u00eda por ser valores no encontrados.  OnCipError | Evento lanzado cuando sucedi\u00f3 un error al buscar CIPs, devuelve una lista de todos los errores o error ocurridos durante el proceso (Ver apartado de Errores).  OnCipFailure | Evento lanzado cuando sucedi\u00f3 un error de conexi\u00f3n con los servicios de PagoEfectivo, devolviendo un mensaje de error (String) con lo sucedido.   Para poder llamar los callbacks de la b\u00fasqueda de CIPs, basta con implementar en la clase donde se est\u00e9 trabajando, la interfaz  SearchListener  Ejemplo de implementaci\u00f3n en una Actividad   Java   Kotlin    Cuando la interfaz es implementada, sus respectivos m\u00e9todos son llamados en la clase.  Java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14      @Override \n     public   void   OnSearchSuccessful ( List CipError   list )   { \n         //TODO: CODE HERE \n     } \n\n     @Override \n     public   void   OnCipError ( List CipError   message )   { \n         //TODO: CODE HERE \n     } \n\n     @Override \n     public   void   OnCipFailure ( String   message )   { \n         //TODO: CODE HERE \n     }    Kotlin   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      override   fun   OnSearchSuccessful ( list :   List CipSearch )   { \n         TODO ( CODE HERE ) \n     } \n\n     override   fun   OnCipError ( message :   List CipError )   { \n         TODO ( CODE HERE ) \n     } \n\n     override   fun   OnCipFailure ( message :   String )   { \n         TODO ( CODE HERE ) \n     }    Con los pasos anteriores hechos, se procede a llamar a la funci\u00f3n de b\u00fasqueda de CIP's.", 
            "title": "2. Implementar SearchListener"
        }, 
        {
            "location": "/#3-metodo-searchcip", 
            "text": "El m\u00e9todo searchCip() recibe 3 par\u00e1metros:   CIP o CIPs a buscar | Generado en el paso 1  SearchListener Callback | Generado en el paso 2  Lenguaje de la petici\u00f3n (Language Object)   Para el lenguaje de la petici\u00f3n, el SDK provee una clase que le dar\u00e1 los idiomas soportados por el SDK. Esta es la clase: Language.   Clase Language    Teniendo definido los 3 par\u00e1metros, el m\u00e9todo se llama con una instancia de la clase PagoEfectivoSdk. Aqu\u00ed te mostramos un ejemplo usando como idioma predefinido el idioma SPANISH_PERU  Java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      PagoEfectivoSdk   instance ; \n     instance   =   PagoEfectivoSdk . getInstance (); \n\n     //One Cip \n     instance . searchCip ( Language . SPANISH_PERU ,   cip ,   this ); \n\n     //Multiple Cips \n     List Integer   listCips   =   new   ArrayList (); \n     listCips . add ( 7777777 ); \n     listCips . add ( 3333333 ); \n\n     instance . searchCip ( Language . SPANISH_PERU ,   listCips ,   this );    Kotlin   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      val   instance :   PagoEfectivoSdk \n     instance   =   PagoEfectivoSdk . getInstance () \n\n     //One Cip \n     instance . searchCip ( Language . SPANISH_PERU ,   cip ,   this ) \n\n     //Multiple Cips \n     val   listCips   =   ArrayList Int () \n     listCips . add ( 7777777 ) \n     listCips . add ( 3333333 ) \n\n     instance . searchCip ( Language . SPANISH_PERU ,   listCips ,   this )    Cabe mencionar que en caso no se setee el lenguaje en la petici\u00f3n, est\u00e9 ser\u00e1 por default  SPANISH_PERU  tal como sucede en el generateCip().  Java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      PagoEfectivoSdk   instance ; \n     instance   =   PagoEfectivoSdk . getInstance (); \n\n     //One Cip \n     instance . searchCip ( cip ,   this ); \n\n     //Multiple Cips \n     List Integer   listCips   =   new   ArrayList (); \n     listCips . add ( 7777777 ); \n     listCips . add ( 3333333 ); \n\n     instance . searchCip ( listCips ,   this );    Kotlin   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12      val   instance :   PagoEfectivoSdk \n     instance   =   PagoEfectivoSdk . getInstance () \n\n     //One Cip \n     instance . searchCip ( cip ,   this ) \n\n     //Multiple Cips \n     val   listCips   =   ArrayList Int () \n     listCips . add ( 7777777 ) \n     listCips . add ( 3333333 ) \n\n     instance . searchCip ( listCips ,   this )    El CIP(s) resultante(s) de esta funci\u00f3n, se podr\u00e1(n) consumir desde el llamado del callback OnSearchSuccessful(), m\u00e9todo que devuelve todos los CIPs buscados por el usuario a trav\u00e9s de una lista de objetos  CipSearch .  OnSearchSuccessful()   Java   Kotlin", 
            "title": "3. M\u00e9todo searchCip()"
        }, 
        {
            "location": "/#pagoefectivo-sdk-tratamiento-de-errores", 
            "text": "Para la implementaci\u00f3n de  generateCip()  y  searchCip()  fueron necesarios el uso de sus respectivos listener  (CipListener   SearchListener)  los cuales tienen en com\u00fan una funci\u00f3n para el tratamiento de errores  OnCipError() .  OnCipError()  devuelve una lista de objetos de tipo CipError. El cual tiene 3 campos b\u00e1sicos:   code --  C\u00f3digo del error generado  field --  Campo Errado o Secci\u00f3n errada  message --  Descripci\u00f3n del error   Al ser una lista, esta se puede recorrer listando as\u00ed el(los) error(es) que se puedan generar al llamar las funciones respectivas del SDK.  Java   Kotlin", 
            "title": "PagoEfectivo SDK | Tratamiento de Errores"
        }, 
        {
            "location": "/#pagoefectivo-sdk-proguard-configurations", 
            "text": "Si est\u00e1 usando ProGuard en su proyecto agregue las siguientes l\u00edneas a su archivo de configuraci\u00f3n Proguard:  1\n2\n3 -keep class pe.kdsep.** { *; }\n-dontwarn javax.annotation.**\n-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement    Cualquier duda puedes escribirnos a:  feedback@pagoefectivo.pe .", 
            "title": "PagoEfectivo SDK | Proguard Configurations"
        }
    ]
}